package it.eng.pathway.hdms.connection;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;

import io.swagger.client.ApiException;
import io.swagger.client.api.CardiacRehabilitationProgrammeApi;
import io.swagger.client.model.CardiacRehabilitationProgramme;
import io.swagger.client.model.ExerciseProgramme;
import it.eng.pathway.utility.DateMgt;
import it.eng.pathway.utility.PwLogger;

public class CRProgramme {
	
	private static Properties prop;
	private static String filename = "config.properties";

	public static CardiacRehabilitationProgramme getProgramme(String patientNumber, String xSessionId) throws ApiException, IOException{
//		try {
//			InetAddress iaddr=InetAddress.getLocalHost();
//			String address=String.valueOf(iaddr);
//			if (!address.startsWith("wellness")){
//				PwLogger.logger.fine("SQUIDMAN proxy set");
//				System.setProperty("http.proxyHost", "localhost");
//				System.setProperty("http.proxyPort", "13128");
//			}
//		} catch (UnknownHostException e) {
//			e.printStackTrace();
//		}
		
		prop = new Properties();
		InputStream inputStream = CRProgramme.class.getClassLoader().getResourceAsStream(filename);
		prop.load(inputStream);
		
		CardiacRehabilitationProgrammeApi api=new CardiacRehabilitationProgrammeApi();
		api.getApiClient().setBasePath(prop.getProperty("HDMSURL"));
		PwLogger.logger.fine("Connecting to... "+api.getApiClient().getBasePath());
		
		CardiacRehabilitationProgramme result=new CardiacRehabilitationProgramme();
		try {
			result=api.cardiacRehabilitationProgrammeGetCardiacRehabilitationProgramme(patientNumber, xSessionId);
			PwLogger.logger.fine(result.toString());
		} catch (ApiException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if (result==null || result.getExerciseProgrammes()==null || result.getExerciseProgrammes().get(0).getWeeklyTime()==null){
			result=createFakeProgramme(180);
		}
		
		return result;
	}
	
	
	//TO DELETE when integrated
	
	private static int WEEKLY_FREQ = 3;
	private static int N=2;
	private static int TOTALDURATION=50;
	private static double wutp=0.12;
	private static double aetp=0.77;
	private static double cdtp=0.12;

	public static CardiacRehabilitationProgramme createFakeProgramme(int maxFreq) {
			PwLogger.printMethod();
			PwLogger.logger.fine("FAKE PROGRAMME CREATED");
			CardiacRehabilitationProgramme crp=new CardiacRehabilitationProgramme();
			crp.setCardiacrehabilitationProgrammecreationDate(DateMgt.getDate("2016-01-23"));
//			TrainingProfile tp=new TrainingProfile();
//			tp.setWarmingUpDuration((int) (TOTALDURATION*wutp));
//			tp.setWarmingHRzoneMax((int) (0.6*maxFreq));
//			tp.setWarmingHRzoneMin((int) (0.5*maxFreq));
//			
//			tp.setMainDuration((int) (TOTALDURATION*aetp));
//			tp.setMainHRzoneMax((int) (0.85*maxFreq));
//			tp.setMainHRzoneMin((int) (0.6*maxFreq));
//			
//			tp.setCooldownDuration((int) (TOTALDURATION*cdtp));
//			tp.setCooldownHRZoneMax((int) (0.7*maxFreq));
//			tp.setCooldownHRZoneMin((int) (0.5*maxFreq));

//			crp.setTrainingProfile(tp);
			
			List<ExerciseProgramme> exs=new ArrayList<ExerciseProgramme>();
			
			
			ExerciseProgramme ex=new ExerciseProgramme();
			ex.setWeeklyFrequency(WEEKLY_FREQ);
			ex.setExerciseIntensity(1);
			ex.setWeeklyTime(WEEKLY_FREQ*TOTALDURATION);
			ex.setClassDuration(TOTALDURATION);
			ex.setGameDuration(TOTALDURATION/2);
			ex.setNumberOfExerClass(2);
			ex.setNumberOfExerGame(0);
			ex.setNumberOfActiveLifeStyleActivity(1);
			Calendar c=GregorianCalendar.getInstance();
			ex.setExerciseProgrammeDate(c.getTime());
			exs.add(ex);
			
			ex=new ExerciseProgramme();
			ex.setWeeklyFrequency(WEEKLY_FREQ);
			ex.setExerciseIntensity(1);
			ex.setWeeklyTime(WEEKLY_FREQ*TOTALDURATION);
			ex.setClassDuration(TOTALDURATION);
			ex.setGameDuration(TOTALDURATION/2);
			ex.setNumberOfExerClass(2);
			ex.setNumberOfExerGame(0);
			ex.setNumberOfActiveLifeStyleActivity(1);
			c.add(Calendar.DAY_OF_MONTH, -7);
			ex.setExerciseProgrammeDate(c.getTime());
			exs.add(ex);
			
			ex=new ExerciseProgramme();
			ex.setWeeklyFrequency(WEEKLY_FREQ);
			ex.setExerciseIntensity(1);
			ex.setWeeklyTime(WEEKLY_FREQ*TOTALDURATION);
			ex.setClassDuration(TOTALDURATION);
			ex.setGameDuration(TOTALDURATION/2);
			ex.setNumberOfExerClass(2);
			ex.setNumberOfExerGame(0);
			ex.setNumberOfActiveLifeStyleActivity(1);
			c.add(Calendar.DAY_OF_MONTH, -2);
			ex.setExerciseProgrammeDate(c.getTime());
			exs.add(ex);
			
			crp.setExerciseProgrammes(exs);
			
			return crp;
	}

	public static ExerciseProgramme createFakeExerciseProgramme(int i) {
		ExerciseProgramme ex=new ExerciseProgramme();
		ex.setWeeklyFrequency(WEEKLY_FREQ);
		ex.setExerciseIntensity(1);
		ex.setWeeklyTime(WEEKLY_FREQ*TOTALDURATION);
		ex.setClassDuration(TOTALDURATION);
		ex.setGameDuration(TOTALDURATION/2);
		ex.setNumberOfExerClass(2);
		ex.setNumberOfExerGame(0);
		ex.setNumberOfActiveLifeStyleActivity(1);
		Calendar c=GregorianCalendar.getInstance();
		ex.setExerciseProgrammeDate(c.getTime());
		
		return ex;
	}
	
}

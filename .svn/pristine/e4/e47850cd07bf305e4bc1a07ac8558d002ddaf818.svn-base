package it.eng.pathway.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.google.gson.Gson;

import ers.test.Utility;
import io.swagger.client.ApiException;
import io.swagger.client.model.BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection;
import io.swagger.client.model.BehavioralChangeProgressGoalAssessmentSubSection;
import io.swagger.client.model.BehavioralChangeProgressSection;
import io.swagger.client.model.BehaviouralChangeGoalDescriptionSubsection;
import io.swagger.client.model.BehaviouralChangeProgrammePersonalGoalSubsection;
import io.swagger.client.model.BehaviouralChangeProgrammeSection;
import io.swagger.client.model.GenericPostputResult;
import it.eng.pathway.fake.model.CardiacRehabilitationProgramme;
import it.eng.pathway.fake.model.ExerciseProgramme;
import it.eng.pathway.fake.model.GoalCategoryType;
import it.eng.pathway.frontend.business.ContentBusiness;
import it.eng.pathway.frontend.dao.QuestionnaireDAO;
import it.eng.pathway.frontend.model.Content;
import it.eng.pathway.frontend.model.Questionnaire;
import it.eng.pathway.hdms.connection.BCProgramme;
import it.eng.pathway.hdms.connection.BCProgress;
import it.eng.pathway.utility.PwLogger;
import it.eng.pathway.utilitymodel.CustomGoalAssessment;
import it.eng.pathway.utilitymodel.CustomSession;

@Controller
@SessionAttributes({"xSessionId" , "sin", "bcprogramme", "goalsByType", "programme"})
public class Lifestyle {
	
private static final String FORMATTER_STRING = "yyyy-MM-dd";
private static final String READABLE_STRING = "dd-MM-yyyy hh:mm";
private static final String PDF_PATH = "/WEB-INF/resources/pdf/";
	//	static ArrayList<String> labels;
	static ArrayList<CustomSession> sessions;
	
	@Autowired
	private ContentBusiness contentBusiness;
	
	@Autowired
	ServletContext servletContext;
	
	@Autowired
	QuestionnaireDAO questionnaireDAO;
	
	private MessageSource msg;
	@Autowired
    public void AccountsController(MessageSource msgSrc) {
     this.msg = msgSrc;
    }
	
	@RequestMapping(value="/physicalActivity", method=RequestMethod.GET)
	public String homeRender(Model model, Locale locale){
		Content tips=contentBusiness.find("PhysicalActivity", "Tips",locale);
		if (tips!=null){
			model.addAttribute("tips", tips.getHtml());
			model.addAttribute("tipsId", tips.getId());
		}
		
		Content recomm=contentBusiness.find("PhysicalActivity", "Recomm",locale);
		if (recomm!=null){
			model.addAttribute("recomm", recomm.getHtml());
			model.addAttribute("recommId", recomm.getId());
		}
		
		Content other=contentBusiness.find("PhysicalActivity", "Other",locale);
		if (other!=null){
			model.addAttribute("other", other.getHtml());
			model.addAttribute("otherId", other.getId());
		}
		
		CardiacRehabilitationProgramme programme=(CardiacRehabilitationProgramme) model.asMap().get("programme");
		if(programme!=null){
			ExerciseProgramme exProgramme=programme.getExerciseProgrammes().get(0);
			model.addAttribute("exProgramme", exProgramme);
		}
		
		return "physicalActivityPage";
	}
	
	@RequestMapping(value="/healthy", method=RequestMethod.GET)
	public String healthyRender(Model model, Locale locale){
		PwLogger.printMethod();
		String sin=(String) model.asMap().get("sin");
		String xSessionId=(String) model.asMap().get("xSessionId");
		
		try {
			BehaviouralChangeProgrammeSection bcprogramme=BCProgramme.getProgramme(sin, xSessionId);
			PwLogger.logger.fine(bcprogramme.toString());
			model.addAttribute("bcprogramme", bcprogramme);
			
			List<BehaviouralChangeProgrammePersonalGoalSubsection> goals=bcprogramme.getPersonalGoals();
			HashMap<Integer,List<BehaviouralChangeProgrammePersonalGoalSubsection>> goalsByType = new HashMap<Integer,List<BehaviouralChangeProgrammePersonalGoalSubsection>>();
			for (BehaviouralChangeProgrammePersonalGoalSubsection current : goals) {
				int type=current.getCategory();
				List<BehaviouralChangeProgrammePersonalGoalSubsection> tmp = goalsByType.get(type);
				if (tmp==null){
					tmp=new ArrayList<BehaviouralChangeProgrammePersonalGoalSubsection>();
				}
				tmp.add(current);
				goalsByType.put(type, tmp);
			}
			
			model.addAttribute("goalsByType", goalsByType);
			
			
		} catch (ApiException e) {
			e.printStackTrace();
			String tester=this.msg.getMessage("error.msg.tester", null, locale);
			String msg=Utility.getMessage(e)+ " " + tester;
			PwLogger.logger.fine(msg);
			PwLogger.errorLogger.severe(msg);
			return HomeController.showErrorMsg(msg,"FROM HDMS: "+msg, model);	
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		return "healthyPage";
	}
	
	@RequestMapping(value="/smoking", method=RequestMethod.GET)
	public String smokingRender(Model model, Locale locale){
		Content tips=contentBusiness.find("Smoking", "Tips",locale);
		if (tips!=null){
			model.addAttribute("tips", tips.getHtml());
			model.addAttribute("tipsId", tips.getId());
		}
		
		Content recomm=contentBusiness.find("Smoking", "Recomm",locale);
		if (recomm!=null){
			model.addAttribute("recomm", recomm.getHtml());
			model.addAttribute("recommId", recomm.getId());
		}
		
		Content other=contentBusiness.find("Smoking", "Other",locale);
		if (other!=null){
			model.addAttribute("other", other.getHtml());
			model.addAttribute("otherId", other.getId());
		}
		
		ArrayList<String> goals=new ArrayList<>();
		ArrayList<String> goalsQuestions=new ArrayList<>();
		ArrayList<String> goalsCategories=new ArrayList<>();
		
		ArrayList<Questionnaire> completeGoals=new ArrayList<Questionnaire>();
		
		HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>> goalsByType=(HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>>) model.asMap().get("goalsByType");
		
		int type = GoalCategoryType.smoking.ordinal()+1;
		List<BehaviouralChangeProgrammePersonalGoalSubsection> goalsHDMS = goalsByType.get(type);
		PwLogger.logger.fine("SMOKING GOAL");
		if (goalsHDMS != null) {
			for (BehaviouralChangeProgrammePersonalGoalSubsection goal : goalsHDMS) {
				PwLogger.logger.fine(goal.toString());
				goals.add("FROM HDMS - "+goal.getDescription());
//				goalsQuestions.add("FROM HDMS - "+" no question related");
				Questionnaire q=questionnaireDAO.find(goal.getId(), locale);
				String goalQuestion = q.getText();
				goalsQuestions.add("from DB - "+goalQuestion);
				goalsCategories.add(" - "+q.getCategory());
				completeGoals.add(q);
			}
		}
		
		
		model.addAttribute("lang",locale.getLanguage());
		
		String smokingLabel=this.msg.getMessage("lifestyle.cig.event", null, locale);
		
		model.addAttribute("smokeEvent", smokingLabel);
		
		Gson gson=new Gson();
		model.addAttribute("goalCategory", type);
		model.addAttribute("goals", goals);
		model.addAttribute("goalsQuestions",goalsQuestions);
		model.addAttribute("completeGoals", completeGoals);
		model.addAttribute("completeGoalsJson", gson.toJson(completeGoals));
		
		model.addAttribute("goalsJs", gson.toJson(goals));
//		model.addAttribute("goalsQuestions",gson.toJson(goalsQuestions));
//		if (goalsCategories.size()==0)
//			goalsCategories.add("Unit");
		model.addAttribute("goalsCategories",gson.toJson(goalsCategories));
		
		model.addAttribute("stylesheets","resources/css/fullcalendar_smoking.css");
		
		try {
			String patientNumber=(String) model.asMap().get("sin");
			String xSessionId=(String) model.asMap().get("xSessionId");
			BehavioralChangeProgressSection bcProgress=BCProgress.getProgress(patientNumber, xSessionId);
			List<BehavioralChangeProgressGoalAssessmentSubSection> oldAnswers = bcProgress.getGoalAssessments();
			ArrayList<CustomGoalAssessment> gas=new ArrayList<CustomGoalAssessment>();
			
			for (BehavioralChangeProgressGoalAssessmentSubSection current : oldAnswers) {
				if (current.getCategory()==type){
					CustomGoalAssessment ga = new CustomGoalAssessment();
					ga.setCategory(current.getCategory());
					ga.setDate(current.getSubmissionDate());
					ga.setGoalId(current.getId());
					Questionnaire q=questionnaireDAO.find(current.getId(), locale);
					ga.setSubcategory(q.getCategory());
					List<BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection> ans = current.getQuantitativeAnwers();
					if (ans!=null){
						for (BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection currentAns : ans) {
							ga.setQuestionId(currentAns.getQuestionId());
							ga.setValue(String.valueOf(currentAns.getValue()));
						}
					}
					gas.add(ga);
				}
			}
			
			model.addAttribute("pastAssessments",gson.toJson(gas));
			
		} catch (ApiException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		
		return "smokingPage";
	}
	
	@RequestMapping(value="/alcohol", method=RequestMethod.GET)
	public String alcoholRender(Model model, Locale locale){
		Content tips=contentBusiness.find("Alcohol", "Tips",locale);
		if (tips!=null){
			model.addAttribute("tips", tips.getHtml());
			model.addAttribute("tipsId", tips.getId());
		}
		
		Content recomm=contentBusiness.find("Alcohol", "Recomm",locale);
		if (recomm!=null){
			model.addAttribute("recomm", recomm.getHtml());
			model.addAttribute("recommId", recomm.getId());
		}
		
		Content other=contentBusiness.find("Alcohol", "Other",locale);
		if (other!=null){
			model.addAttribute("other", other.getHtml());
			model.addAttribute("otherId", other.getId());
		}
		
		ArrayList<String> goals=new ArrayList<>();
		ArrayList<String> goalsQuestions=new ArrayList<>();
		ArrayList<String> goalsCategories=new ArrayList<>();
		
		ArrayList<Questionnaire> completeGoals=new ArrayList<Questionnaire>();
		
		HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>> goalsByType=(HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>>) model.asMap().get("goalsByType");
		
		int type = GoalCategoryType.alcohol.ordinal()+1;
		List<BehaviouralChangeProgrammePersonalGoalSubsection> goalsHDMS = goalsByType.get(type);
		PwLogger.logger.fine("ALCOHOL GOAL");
		if (goalsHDMS != null) {
			for (BehaviouralChangeProgrammePersonalGoalSubsection goal : goalsHDMS) {
				PwLogger.logger.fine(goal.toString());
				goals.add("FROM HDMS - "+goal.getDescription());
//				goalsQuestions.add("FROM HDMS - "+" no question related");
				Questionnaire q=questionnaireDAO.find(goal.getId(), locale);
				String goalQuestion = q.getText();
				goalsQuestions.add("from DB - "+goalQuestion);
				goalsCategories.add(" - "+q.getCategory());
				completeGoals.add(q);
			}
		}
		
		model.addAttribute("lang",locale.getLanguage());
		
		String smokingLabel=this.msg.getMessage("lifestyle.alc.event", null, locale);
		
		model.addAttribute("alcEvent", smokingLabel);
		
		
		Gson gson=new Gson();
		model.addAttribute("goalCategory", type);
		model.addAttribute("goals", goals);
		model.addAttribute("goalsQuestions",goalsQuestions);
		model.addAttribute("completeGoals", completeGoals);
		model.addAttribute("completeGoalsJson", gson.toJson(completeGoals));
		
		model.addAttribute("goalsJs", gson.toJson(goals));
//		model.addAttribute("goalsQuestions",gson.toJson(goalsQuestions));
//		if (goalsCategories.size()==0)
//			goalsCategories.add("Unit");
		model.addAttribute("goalsCategories",gson.toJson(goalsCategories));
		
		
		model.addAttribute("stylesheets","resources/css/fullcalendar_smoking.css");
		
		
		try {
			String patientNumber=(String) model.asMap().get("sin");
			String xSessionId=(String) model.asMap().get("xSessionId");
			BehavioralChangeProgressSection bcProgress=BCProgress.getProgress(patientNumber, xSessionId);
			List<BehavioralChangeProgressGoalAssessmentSubSection> oldAnswers = bcProgress.getGoalAssessments();
			ArrayList<CustomGoalAssessment> gas=new ArrayList<CustomGoalAssessment>();
			
			for (BehavioralChangeProgressGoalAssessmentSubSection current : oldAnswers) {
				if (current.getCategory()==type){
					CustomGoalAssessment ga = new CustomGoalAssessment();
					ga.setCategory(current.getCategory());
					ga.setDate(current.getSubmissionDate());
					ga.setGoalId(current.getId());
					Questionnaire q=questionnaireDAO.find(current.getId(), locale);
					ga.setSubcategory(q.getCategory());
					List<BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection> ans = current.getQuantitativeAnwers();
					if (ans!=null){
						for (BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection currentAns : ans) {
							ga.setQuestionId(currentAns.getQuestionId());
							ga.setValue(String.valueOf(currentAns.getValue()));
						}
					}
					gas.add(ga);
				}
			}
			
			model.addAttribute("pastAssessments",gson.toJson(gas));
			
		} catch (ApiException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		return "alcoholPage";
	}
	
	@RequestMapping(value="/diet", method=RequestMethod.GET)
	public String dietRender(Model model, Locale locale){
		Content tips=contentBusiness.find("Diet", "Tips",locale);
		if (tips!=null){
			model.addAttribute("tips", tips.getHtml());
			model.addAttribute("tipsId", tips.getId());
		}
		
		Content recomm=contentBusiness.find("Diet", "Recomm",locale);
		if (recomm!=null){
			model.addAttribute("recomm", recomm.getHtml());
			model.addAttribute("recommId", recomm.getId());
		}
		
		Content other=contentBusiness.find("Diet", "Other",locale);
		if (other!=null){
			model.addAttribute("other", other.getHtml());
			model.addAttribute("otherId", other.getId());
		}
		
		Content recipe=contentBusiness.find("Diet", "Recipe",locale);
		if (recipe!=null){
			model.addAttribute("recipe", recipe.getHtml());
			model.addAttribute("recipeId", recipe.getId());
		}
		
		ArrayList<String> goals=new ArrayList<>();
		ArrayList<String> goalsQuestions=new ArrayList<>();
		ArrayList<String> goalsCategories=new ArrayList<>();
		
		ArrayList<Questionnaire> completeGoals=new ArrayList<Questionnaire>();
		
		
//		String goal1="Your goal is to eat at least <b>5 Fruit and Veg portions</b> each day";
//		String goal2="Your goal is to  <b>reduce the amount of saturated fat</b> you eat each day";
//		String goal3="Your goal is to  <b>reduce the amount of salt</b> you eat each day";
//		goals.add(goal1);
//		goals.add(goal2);
//		goals.add(goal3);
		
//		FROM HDMS
//		BehaviouralChangeProgrammeSection bcprogramme=(BehaviouralChangeProgrammeSection) model.asMap().get("bcprogramme");
		
		HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>> goalsByType=(HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>>) model.asMap().get("goalsByType");
		
		int type = GoalCategoryType.eating.ordinal()+1;
		List<BehaviouralChangeProgrammePersonalGoalSubsection> goalsHDMS = goalsByType.get(type);
		PwLogger.logger.fine("EATING GOAL");
		if (goalsHDMS != null) {
			for (BehaviouralChangeProgrammePersonalGoalSubsection goal : goalsHDMS) {
				PwLogger.logger.fine(goal.toString());
				goals.add("FROM HDMS - "+goal.getDescription());
//				goalsQuestions.add("FROM HDMS - "+" no question related");
				Questionnaire q=questionnaireDAO.find(goal.getId(), locale);
				String goalQuestion = q.getText();
				goalsQuestions.add("from DB - "+goalQuestion);
				goalsCategories.add(" - "+q.getCategory());
				completeGoals.add(q);
			}
		}
		
		model.addAttribute("lang",locale.getLanguage());
		model.addAttribute("goalCategory", type);
		
		String vegLabel=this.msg.getMessage("lifestyle.veg.event", null, locale);
		String fatLabel=this.msg.getMessage("lifestyle.fat.event", null, locale);
		String saltLabel=this.msg.getMessage("lifestyle.salt.event", null, locale);
		
		model.addAttribute("vegEvent", vegLabel);
		model.addAttribute("fatEvent", fatLabel);
		model.addAttribute("saltEvent", saltLabel);
//		
//		
//		
//		String goal1Q="How many portions of <b>Fruit and Veg</b> did you eat today?";
//		String goal2Q="How many courses containing <b>saturated fats</b> had you today?";
//		String goal3Q="How many teaspoons of <b>salt</b> did you use today?";
//		
//		goalsQuestions.add(goal1Q);
//		goalsQuestions.add(goal2Q);
//		goalsQuestions.add(goal3Q);
//		
//		goalsCategories.add(" - Veg");
//		goalsCategories.add(" - Fat");
//		goalsCategories.add(" - Salt");
//		goalsCategories.add(" - HDMS");
		
		Gson gson=new Gson();
		
		model.addAttribute("goals", goals);
		model.addAttribute("goalsQuestions",goalsQuestions);
		model.addAttribute("completeGoals", completeGoals);
		model.addAttribute("completeGoalsJson", gson.toJson(completeGoals));
		
		model.addAttribute("goalsJs", gson.toJson(goals));
//		model.addAttribute("goalsQuestions",gson.toJson(goalsQuestions));
		model.addAttribute("goalsCategories",gson.toJson(goalsCategories));
		
		
		try {
			String patientNumber=(String) model.asMap().get("sin");
			String xSessionId=(String) model.asMap().get("xSessionId");
			BehavioralChangeProgressSection bcProgress=BCProgress.getProgress(patientNumber, xSessionId);
			List<BehavioralChangeProgressGoalAssessmentSubSection> oldAnswers = bcProgress.getGoalAssessments();
			ArrayList<CustomGoalAssessment> gas=new ArrayList<CustomGoalAssessment>();
			
			for (BehavioralChangeProgressGoalAssessmentSubSection current : oldAnswers) {
				if (current.getCategory()==type){
					CustomGoalAssessment ga = new CustomGoalAssessment();
					ga.setCategory(current.getCategory());
					ga.setDate(current.getSubmissionDate());
					ga.setGoalId(current.getId());
					Questionnaire q=questionnaireDAO.find(current.getId(), locale);
					ga.setSubcategory(q.getCategory());
					List<BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection> ans = current.getQuantitativeAnwers();
					if (ans!=null){
						for (BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection currentAns : ans) {
							ga.setQuestionId(currentAns.getQuestionId());
							ga.setValue(String.valueOf(currentAns.getValue()));
						}
					}
					gas.add(ga);
				}
			}
			
			model.addAttribute("pastAssessments",gson.toJson(gas));
			
		} catch (ApiException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		return "dietPage";
	}
	
	@RequestMapping(value="/stress", method=RequestMethod.GET)
	public String stressRender(Model model, Locale locale){
		
		Content tips=contentBusiness.find("Stress", "Tips",locale);
		if (tips!=null){
			model.addAttribute("tips", tips.getHtml());
			model.addAttribute("tipsId", tips.getId());
		}
		
		Content recomm=contentBusiness.find("Stress", "Recomm",locale);
		if (recomm!=null){
			model.addAttribute("recomm", recomm.getHtml());
			model.addAttribute("recommId", recomm.getId());
		}
		
		Content other=contentBusiness.find("Stress", "Other",locale);
		if (other!=null){
			model.addAttribute("other", other.getHtml());
			model.addAttribute("otherId", other.getId());
		}
		
		ArrayList<String> goals=new ArrayList<>();
		ArrayList<String> goalsQuestions=new ArrayList<>();
		ArrayList<String> goalsCategories=new ArrayList<>();
		
		ArrayList<Questionnaire> completeGoals=new ArrayList<Questionnaire>();
		
		HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>> goalsByType=(HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>>) model.asMap().get("goalsByType");
		
		int type = GoalCategoryType.stressManagement.ordinal()+1;
		List<BehaviouralChangeProgrammePersonalGoalSubsection> goalsHDMS = goalsByType.get(type);
		PwLogger.logger.fine("StressManagement GOAL");
		if (goalsHDMS != null) {
			for (BehaviouralChangeProgrammePersonalGoalSubsection goal : goalsHDMS) {
				PwLogger.logger.fine(goal.toString());
				goals.add("FROM HDMS - "+goal.getDescription());
//				goalsQuestions.add("FROM HDMS - "+" no question related");
				Questionnaire q=questionnaireDAO.find(goal.getId(), locale);
				if (q!=null){
					String goalQuestion = q.getText();
					goalsQuestions.add("from DB - "+goalQuestion);
					goalsCategories.add(" - "+q.getCategory());
					completeGoals.add(q);
				}
			}
		}
		
		model.addAttribute("lang",locale.getLanguage());
		
		
		Gson gson=new Gson();
		model.addAttribute("goalCategory", type);
		model.addAttribute("goals", goals);
		model.addAttribute("goalsQuestions",goalsQuestions);
		model.addAttribute("completeGoals", completeGoals);
		model.addAttribute("completeGoalsJson", gson.toJson(completeGoals));
		
		model.addAttribute("goalsJs", gson.toJson(goals));
//		model.addAttribute("goalsQuestions",gson.toJson(goalsQuestions));
//		if (goalsCategories.size()==0)
//			goalsCategories.add("Unit");
		model.addAttribute("goalsCategories",gson.toJson(goalsCategories));
		
		
		
		return "stressPage";
	}
	
	@RequestMapping(value="/medicine", method=RequestMethod.GET)
	public String medicineRender(Model model, Locale locale){
		
		Content tips=contentBusiness.find("Medicine", "Tips",locale);
		if (tips!=null){
			model.addAttribute("tips", tips.getHtml());
			model.addAttribute("tipsId", tips.getId());
		}
		
		Content recomm=contentBusiness.find("Medicine", "Recomm",locale);
		if (recomm!=null){
			model.addAttribute("recomm", recomm.getHtml());
			model.addAttribute("recommId", recomm.getId());
		}
		
		Content other=contentBusiness.find("Medicine", "Other",locale);
		if (other!=null){
			model.addAttribute("other", other.getHtml());
			model.addAttribute("otherId", other.getId());
		}
		
		
		ArrayList<String> goals=new ArrayList<>();
		ArrayList<String> goalsQuestions=new ArrayList<>();
		ArrayList<String> goalsCategories=new ArrayList<>();
		
		ArrayList<Questionnaire> completeGoals=new ArrayList<Questionnaire>();
		
		HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>> goalsByType=(HashMap<Integer, List<BehaviouralChangeProgrammePersonalGoalSubsection>>) model.asMap().get("goalsByType");
		
		int type = GoalCategoryType.medication.ordinal()+1;
		List<BehaviouralChangeProgrammePersonalGoalSubsection> goalsHDMS = goalsByType.get(type);
		PwLogger.logger.fine("Medication GOAL");
		if (goalsHDMS != null) {
			for (BehaviouralChangeProgrammePersonalGoalSubsection goal : goalsHDMS) {
				PwLogger.logger.fine(goal.toString());
				goals.add("FROM HDMS - "+goal.getDescription());
//				goalsQuestions.add("FROM HDMS - "+" no question related");
				Questionnaire q=questionnaireDAO.find(goal.getId(), locale);
				if (q!=null){
					String goalQuestion = q.getText();
					goalsQuestions.add("from DB - "+goalQuestion);
					goalsCategories.add(" - "+q.getCategory());
					completeGoals.add(q);
				}
			}
		}
		
		model.addAttribute("lang",locale.getLanguage());
		
		
		Gson gson=new Gson();
		model.addAttribute("goalCategory", type);
		model.addAttribute("goals", goals);
		model.addAttribute("goalsQuestions",goalsQuestions);
		model.addAttribute("completeGoals", completeGoals);
		model.addAttribute("completeGoalsJson", gson.toJson(completeGoals));
		
		model.addAttribute("goalsJs", gson.toJson(goals));
//		model.addAttribute("goalsQuestions",gson.toJson(goalsQuestions));
//		if (goalsCategories.size()==0)
//			goalsCategories.add("Unit");
		model.addAttribute("goalsCategories",gson.toJson(goalsCategories));
		
		return "medicinePage";
	}
	
	
	@RequestMapping(value = "/getpdf/{file_name}", method = RequestMethod.GET)
	public ResponseEntity<byte[]> getFile(@PathVariable("file_name") String filename, Model model, Locale locale) {
		String completefilename=filename+"_"+locale.toString()+".pdf";
		File toDownload = new File( servletContext.getRealPath(PDF_PATH)+"/"+completefilename );
		if (!toDownload.exists()){
			completefilename=filename+"_en.pdf"; //ipotizzo che quello in inglese esista sempre
			toDownload = new File( servletContext.getRealPath(PDF_PATH)+"/"+completefilename );
		}
		byte[] pdfBytes={1};
		try {
			pdfBytes = Files.readAllBytes(toDownload.toPath());
		} catch (IOException e) {
			e.printStackTrace();
		}
//		FileSystemResource toRet= new FileSystemResource(toDownload);
//		return toRet;
		
		HttpHeaders headers = new HttpHeaders();
	    headers.setContentType(MediaType.parseMediaType("application/pdf"));
	    headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
	    ResponseEntity<byte[]> response = new ResponseEntity<byte[]>(pdfBytes, headers, HttpStatus.OK);
	    return response;
	}
	
	
	@RequestMapping(value = "/saveGoals", method = RequestMethod.POST)
	public @ResponseBody String saveIntoPathway(@RequestBody CustomGoalAssessment[] answers,Model model, Locale locale) {
		//recupera tutto il BCProgress dall'HDMS
		//aggiungi le risposte date
		//salva tutto di nuovo
		
		
		try {
			String patientNumber=(String) model.asMap().get("sin");
			String xSessionId=(String) model.asMap().get("xSessionId");
			
			BehavioralChangeProgressSection bcProgress=BCProgress.getProgress(patientNumber, xSessionId);
			List<BehavioralChangeProgressGoalAssessmentSubSection> oldAnswers = bcProgress.getGoalAssessments();
			
			for (CustomGoalAssessment current : answers) {
				System.out.println(current.toString());
				BehavioralChangeProgressGoalAssessmentSubSection temp= new BehavioralChangeProgressGoalAssessmentSubSection();
				temp.setCategory(current.getCategory());
				temp.setSubmissionDate(current.getDate());
				temp.setId(current.getGoalId());
				List<BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection> quantitativeAnwers = new ArrayList<>();
				BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection ans=new BehavioralChangeProgressGoalAssessmentQuantitativeAnswerSubSubsection();
				ans.setQuestionId(current.getQuestionId());
				ans.setValue(Integer.parseInt(current.getValue()));
				quantitativeAnwers.add(ans);
				temp.setQuantitativeAnwers(quantitativeAnwers);
				oldAnswers.add(temp);
			}
			
			
			GenericPostputResult res = BCProgress.putProgress(patientNumber, bcProgress, xSessionId);
			PwLogger.logger.fine(res.toString());
		} catch (ApiException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
//		String toRet="";
//		try {
//			String result = saveIntoHDMS(sessions, model,locale);
//			PwLogger.logger.fine(result);
//			toRet+=" Saved into PATHway";
//			
//			model=addSessions(sessions, model);
//		} catch (ApiException e) {
//			e.printStackTrace();
//			PwLogger.errorLogger.severe(e.getMessage());
//			toRet+=this.msg.getMessage("hdms.error.msg", null, locale);
////			HomeController.showErrorMsg(toRet, model);
//		} catch (IOException e) {
//			e.printStackTrace();
//			PwLogger.errorLogger.severe(e.getMessage());
//			toRet+=this.msg.getMessage("hdms.error.msg", null, locale);
////			HomeController.showErrorMsg(toRet, model);
//		}
		
//		Gson gson=new Gson();
//		String jsonToRet=gson.toJson(toRet);
//		
//		return jsonToRet;
		
		return "Stored";
	}
	
	
}
